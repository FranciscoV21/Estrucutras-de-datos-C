#include <stdio.h>
#define QUEVE_CAPACITY 10

//Prototipos
struct queve
{
    int data[QUEVE_CAPACITY + 1];
    int start;
    int end;
    int count;
};
void setupQueve(struct queve *q);
int dequeve(struct queve *q, int *value);
int enqueve(struct queve*q, int value);

int main()
{

    struct queve q;
    setupQueve(&q);

    enqueve(&q,10);
    enqueve(&q,11);
    enqueve(&q,12);
    enqueve(&q,13);
    enqueve(&q,14);
    enqueve(&q,15);
    enqueve(&q,16);
    enqueve(&q,17);

    for(int i = 0; i < QUEVE_CAPACITY;i++)
    {
        printf("-%d-\n",q.data);
    }
    return(0);
}

void setupQueve(struct queve *q)
{

    q->start = 0;
    q->end = 0;
    q->count = 0;
}

int dequeve(struct queve *q, int *value)
{
    int r = 0;
    if(q->start != q ->end)
    {
        *value = q->data[q->start];
        q->start ++;

        if(q->start >= QUEVE_CAPACITY + 1)
        {
            q->start = 0;
        }
        r = 1;
    }
    return(r);
}

int enqueve(struct queve*q, int value)
{
    int r = 0;
    if((q->end + 1) % (QUEVE_CAPACITY + 1) != q->start)
    {
        q->data[q->end] = value;
    q->end++;

    if(q->end >= QUEVE_CAPACITY + 1)
    {
        q->end = 0;
    }
    }
}
